"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function initBasicLine() {
  $.plot("#basicLine", [{
    label: "BITCOIN",
    data: [[1, 10], [2, 20], [3, 30], [4, 25], [5, 40], [6, 35], [7, 45], [8, 50], [9, 38], [10, 28], [11, 42], [12, 32]]
  }, {
    label: "ETHEREUM ",
    data: [[1, 20], [2, 24], [3, 32], [4, 28], [5, 38], [6, 40], [7, 48], [8, 55], [9, 40], [10, 30], [11, 45], [12, 35]]
  }], {
    series: {
      lines: {
        show: !0
      },
      points: {
        show: !0
      }
    },
    colors: ["#015941", "#e49e3d"],
    grid: {
      hoverable: !0,
      clickable: !0,
      borderWidth: 1,
      labelMargin: 10,
      tickColor: "rgba(170, 180, 195, 0.1)",
      borderColor: "rgba(170, 180, 195, 0.1)",
      backgroundColor: "transparent"
    },
    yaxis: {
      color: "rgba(170, 180, 195, 0.1)",
      tickColor: "rgba(170, 180, 195, 0.1)",
      font: {
        size: 12,
        fill: "#6c757d",
        family: "Outfit, sans-serif"
      }
    },
    xaxis: {
      ticks: [[1, "Jan"], [2, "Feb"], [3, "Mar"], [4, "Apr"], [5, "May"], [6, "Jun"], [7, "Jul"], [8, "Aug"], [9, "Sep"], [10, "Oct"], [11, "Nov"], [12, "Dec"]],
      color: "rgba(170, 180, 195, 0.1)",
      tickColor: "rgba(170, 180, 195, 0.1)",
      font: {
        size: 12,
        fill: "#6c757d",
        family: "Outfit, sans-serif"
      }
    },
    legend: {
      show: !0
    },
    tooltip: {
      show: !0,
      content: "%s: Value of %x is %y",
      shifts: {
        x: -60,
        y: 25
      },
      cssClass: "flot-tooltip-dark"
    }
  });
}
function initCrosshairTracking() {
  for (var o = [], i = [], a = 0; a < 14; a += .1) o.push([a, Math.sin(a)]), i.push([a, Math.cos(a)]);
  var l = $.plot("#crosshairTracking", [{
    data: o,
    label: "sin(x) = -0.00"
  }, {
    data: i,
    label: "cos(x) = -0.00"
  }], {
    legend: {
      show: !0
    },
    series: {
      lines: {
        show: !0
      }
    },
    colors: ["#015941", "#e49e3d"],
    crosshair: {
      mode: "xy"
    },
    grid: {
      hoverable: !0,
      clickable: !0,
      autoHighlight: !1,
      borderWidth: 1,
      labelMargin: 10,
      tickColor: "rgba(170, 180, 195, 0.1)",
      borderColor: "rgba(170, 180, 195, 0.1)",
      backgroundColor: "transparent"
    },
    yaxis: {
      min: -1.2,
      max: 1.2,
      color: "rgba(170, 180, 195, 0.1)",
      tickColor: "rgba(170, 180, 195, 0.1)",
      font: {
        size: 12,
        fill: "#6c757d",
        family: "Outfit, sans-serif"
      }
    },
    xaxis: {
      color: "rgba(170, 180, 195, 0.1)",
      tickColor: "rgba(170, 180, 195, 0.1)",
      font: {
        size: 12,
        fill: "#6c757d",
        family: "Outfit, sans-serif"
      }
    },
    tooltip: {
      show: !0,
      content: "%s: Value of %x is %y",
      shifts: {
        x: -60,
        y: 25
      },
      cssClass: "flot-tooltip-dark"
    }
  });
  var c,
    u = $("#crosshairTracking .legendLayer text tspan"),
    d = (u.each(function () {
      $(this).css("width", $(this).width());
    }), null);
  function t() {
    d = null;
    var o = c,
      i = l.getAxes();
    if (!(o.x < i.xaxis.min || o.x > i.xaxis.max || o.y < i.yaxis.min || o.y > i.yaxis.max)) for (var a = l.getData(), t = 0; t < a.length; ++t) {
      for (var e = a[t], s = 0; s < e.data.length && !(e.data[s][0] > o.x); ++s);
      var n = e.data[s - 1],
        r = e.data[s],
        r = null == n ? r[1] : null == r ? n[1] : n[1] + (r[1] - n[1]) * (o.x - n[0]) / (r[0] - n[0]);
      u.eq(t).text(e.label.replace(/=.*/, "= " + r.toFixed(2)));
    }
  }
  $("#crosshairTracking").bind("plothover", function (o, i, a) {
    c = i, d = d || setTimeout(t, 50);
  }).bind("plotclick", function (o, i, a) {
    l.lockCrosshair(i);
  });
}
function initBasicArea() {
  $.plot("#basicArea", [{
    label: "BITCOIN",
    data: [[1, 10], [2, 5], [3, 20], [4, 10], [5, 30], [6, 15], [7, 40], [8, 20], [9, 50], [10, 25], [11, 60], [12, 30]]
  }, {
    label: "ETHEREUM ",
    data: [[1, 15], [2, 10], [3, 30], [4, 20], [5, 45], [6, 30], [7, 60], [8, 40], [9, 75], [10, 50], [11, 90], [12, 60]]
  }], {
    series: {
      lines: {
        show: !0,
        fill: !0,
        lineWidth: 3
      },
      points: {
        show: !0
      }
    },
    colors: ["rgba(40, 70, 170, 0.5)", "rgba(35, 185, 100, 0.5)"],
    grid: {
      hoverable: !0,
      clickable: !0,
      borderWidth: 1,
      labelMargin: 10,
      tickColor: "rgba(170, 180, 195, 0.1)",
      borderColor: "rgba(170, 180, 195, 0.1)",
      backgroundColor: "transparent"
    },
    yaxis: {
      color: "rgba(170, 180, 195, 0.1)",
      tickColor: "rgba(170, 180, 195, 0.1)",
      font: {
        size: 12,
        fill: "#6c757d",
        family: "Outfit, sans-serif"
      }
    },
    xaxis: {
      ticks: [[1, "Jan"], [2, "Feb"], [3, "Mar"], [4, "Apr"], [5, "May"], [6, "Jun"], [7, "Jul"], [8, "Aug"], [9, "Sep"], [10, "Oct"], [11, "Nov"], [12, "Dec"]],
      color: "rgba(170, 180, 195, 0.1)",
      tickColor: "rgba(170, 180, 195, 0.1)",
      font: {
        size: 12,
        fill: "#6c757d",
        family: "Outfit, sans-serif"
      }
    },
    legend: {
      show: !0
    },
    tooltip: {
      show: !0,
      content: "%s: Value of %x is %y",
      shifts: {
        x: -60,
        y: 25
      },
      cssClass: "flot-tooltip-dark"
    }
  });
}
function initStackedBar() {
  for (var o = [], i = 0; i <= 10; i += 1) o.push([i, parseInt(30 * Math.random())]);
  for (var a = [], i = 0; i <= 10; i += 1) a.push([i, parseInt(30 * Math.random())]);
  for (var t = [], i = 0; i <= 10; i += 1) t.push([i, parseInt(30 * Math.random())]);
  var e = 0,
    s = !0,
    n = !1,
    r = !1;
  function l() {
    var _lines;
    $.plot("#stackedBar", [{
      data: o,
      label: "Earnings"
    }, {
      data: a,
      label: "Revenues"
    }, {
      data: t,
      label: "Expenses"
    }], {
      series: {
        stack: e,
        lines: (_lines = {
          show: n,
          fill: !0
        }, _defineProperty(_lines, "fill", 1), _defineProperty(_lines, "steps", r), _lines),
        bars: {
          show: s,
          barWidth: .25,
          fill: 1
        }
      },
      grid: {
        hoverable: !0,
        clickable: !0,
        borderWidth: 1,
        labelMargin: 10,
        tickColor: "rgba(170, 180, 195, 0.1)",
        borderColor: "rgba(170, 180, 195, 0.1)",
        backgroundColor: "transparent"
      },
      yaxis: {
        autoScale: "exact",
        color: "rgba(170, 180, 195, 0.1)",
        tickColor: "rgba(170, 180, 195, 0.1)",
        font: {
          size: 12,
          fill: "#6c757d",
          family: "Outfit, sans-serif"
        }
      },
      xaxis: {
        color: "rgba(170, 180, 195, 0.1)",
        tickColor: "rgba(170, 180, 195, 0.1)",
        font: {
          size: 12,
          fill: "#6c757d",
          family: "Outfit, sans-serif"
        }
      },
      legend: {
        show: !0
      },
      tooltip: {
        show: !0,
        content: "%s: Value of %x is %y",
        shifts: {
          x: -60,
          y: 25
        },
        cssClass: "flot-tooltip-dark"
      }
    });
  }
  l(), $(".stackControls button").click(function (o) {
    o.preventDefault(), e = "With stacking" == $(this).text() || null, l();
  }), $(".graphControls button").click(function (o) {
    o.preventDefault(), s = -1 != $(this).text().indexOf("Bars"), n = -1 != $(this).text().indexOf("Lines"), r = -1 != $(this).text().indexOf("steps"), l();
  });
}
function initAxisTickLabels() {
  var i = 100;
  function a(o, i, a) {
    for (var t = [], e = 0; e <= 40; ++e) {
      var s = o + e / 40 * (i - o);
      t.push([s, a(s)]);
    }
    return t;
  }
  var t = [{
      data: a(i, 2, function (o) {
        return Math.cos(o);
      }),
      xaxis: 1,
      yaxis: 1,
      lines: {
        show: !0
      }
    }],
    e = $.plot("#AxisTickLabels", t, {
      grid: {
        tickColor: "rgba(170, 180, 195, 0.1)",
        borderColor: "rgba(170, 180, 195, 0.1)",
        backgroundColor: "transparent"
      },
      yaxis: {
        min: -3,
        max: 3,
        position: "left",
        autoScale: "exact",
        color: "rgba(170, 180, 195, 0.1)",
        tickColor: "rgba(170, 180, 195, 0.1)",
        font: {
          size: 12,
          fill: "#6c757d",
          family: "Outfit, sans-serif"
        }
      },
      xaxis: {
        color: "rgba(170, 180, 195, 0.1)",
        tickColor: "rgba(170, 180, 195, 0.1)",
        position: "bottom",
        font: {
          size: 12,
          fill: "#6c757d",
          family: "Outfit, sans-serif"
        }
      }
    });
  window.requestAnimationFrame(function o() {
    t = [{
      data: a(i += .0025, i + 2, function (o) {
        return Math.cos(o);
      }),
      xaxis: 1,
      yaxis: 1,
      lines: {
        show: !0
      }
    }], e.setData(t), e.setupGrid(!0), e.draw(), window.requestAnimationFrame(o);
  }), $("#tickLabels input").on("change", function () {
    var i = $('input[name="tickLabels"]:checked', "#tickLabels").val();
    e.getXAxes().concat(e.getYAxes()).forEach(function (o) {
      o.options.showTickLabels = i;
    });
  }), $("#tickMarks input").on("change", function () {
    var i = $('input[name="tickMarks"]:checked', "#tickMarks").val();
    e.getXAxes().concat(e.getYAxes()).forEach(function (o) {
      switch (i) {
        case "none":
          o.options.showTicks = !1;
          break;
        case "major":
          o.options.showTicks = !0, o.options.showMinorTicks = !1;
          break;
        case "all":
          o.options.showTicks = !0, o.options.showMinorTicks = !0;
      }
    });
  }), $("#scaling input").on("change", function () {
    var o = $('input[name="scaling"]:checked', "#scaling").val(),
      i = e.getAxes().yaxis;
    switch (o) {
      case "none":
        i.options.autoScale = "none", i.options.min = -3, i.options.max = 3, i.options.autoScaleMargin = null, i.options.growOnly = null;
        break;
      case "fitLoosely":
        i.options.autoScale = "loose", i.options.min = void 0, i.options.max = void 0, i.options.autoScaleMargin = .1, i.options.growOnly = !1;
        break;
      case "fitExactly":
        i.options.autoScale = "exact", i.options.min = void 0, i.options.max = void 0, i.options.autoScaleMargin = null, i.options.growOnly = !1;
        break;
      case "growLoosely":
        i.options.autoScale = "loose", i.options.min = -2, i.options.max = 2, i.options.autoScaleMargin = .1, i.options.growOnly = !0;
        break;
      case "growExactly":
        i.options.autoScale = "exact", i.options.min = void 0, i.options.max = void 0, i.options.autoScaleMargin = null, i.options.growOnly = !0;
    }
  }), $("#verticalPosition input").on("change", function () {
    var i = $('input[name="verticalPosition"]:checked', "#verticalPosition").val();
    e.getYAxes().forEach(function (o) {
      o.options.position = i;
    });
  }), $("#horizontalPosition input").on("change", function () {
    var i = $('input[name="horizontalPosition"]:checked', "#horizontalPosition").val();
    e.getXAxes().forEach(function (o) {
      o.options.position = i;
    });
  });
}
function initPieCharts() {
  for (var o = [], i = Math.floor(6 * Math.random()) + 3, a = 0; a < i; a++) o[a] = {
    label: "Series" + (a + 1),
    data: Math.floor(100 * Math.random()) + 1
  };
  var t = $("#pieCharts");
  function e(o, i) {
    return "<div style='font-size:8pt; text-align:center; padding:2px; color:white;'>" + o + "<br/>" + Math.round(i.percent) + "%</div>";
  }
  $("#example-1").click(function () {
    t.unbind(), $.plot(t, o, {
      series: {
        pie: {
          show: !0
        }
      }
    });
  }), $("#example-2").click(function () {
    t.unbind(), $.plot(t, o, {
      series: {
        pie: {
          show: !0
        }
      },
      legend: {
        show: !1
      }
    });
  }), $("#example-3").click(function () {
    t.unbind(), $.plot(t, o, {
      series: {
        pie: {
          show: !0,
          radius: 1,
          label: {
            show: !0,
            radius: 1,
            formatter: e,
            background: {
              opacity: .8
            }
          }
        }
      },
      legend: {
        show: !1
      }
    });
  }), $("#example-4").click(function () {
    t.unbind(), $.plot(t, o, {
      series: {
        pie: {
          show: !0,
          radius: 1,
          label: {
            show: !0,
            radius: .75,
            formatter: e,
            background: {
              opacity: .5
            }
          }
        }
      },
      legend: {
        show: !1
      }
    });
  }), $("#example-5").click(function () {
    t.unbind(), $.plot(t, o, {
      series: {
        pie: {
          show: !0,
          radius: 1,
          label: {
            show: !0,
            radius: .75,
            formatter: e,
            background: {
              opacity: .5,
              color: "#000"
            }
          }
        }
      },
      legend: {
        show: !1
      }
    });
  }), $("#example-6").click(function () {
    t.unbind(), $.plot(t, o, {
      series: {
        pie: {
          show: !0,
          radius: .75,
          label: {
            show: !0,
            radius: .75,
            formatter: e,
            background: {
              opacity: .5,
              color: "#000"
            }
          }
        }
      },
      legend: {
        show: !1
      }
    });
  }), $("#example-7").click(function () {
    t.unbind(), $.plot(t, o, {
      series: {
        pie: {
          show: !0,
          radius: 1,
          label: {
            show: !0,
            radius: 2 / 3,
            formatter: e,
            threshold: .1
          }
        }
      },
      legend: {
        show: !1
      }
    });
  }), $("#example-8").click(function () {
    t.unbind(), $.plot(t, o, {
      series: {
        pie: {
          show: !0,
          combine: {
            color: "#999",
            threshold: .05
          }
        }
      },
      legend: {
        show: !1
      }
    });
  }), $("#example-9").click(function () {
    t.unbind(), $.plot(t, o, {
      series: {
        pie: {
          show: !0,
          radius: 500,
          label: {
            show: !0,
            formatter: e,
            threshold: .1
          }
        }
      },
      legend: {
        show: !1
      }
    });
  }), $("#example-10").click(function () {
    t.unbind(), $.plot(t, o, {
      series: {
        pie: {
          show: !0,
          radius: 1,
          tilt: .5,
          label: {
            show: !0,
            radius: 1,
            formatter: e,
            background: {
              opacity: .8
            }
          },
          combine: {
            color: "#999",
            threshold: .1
          }
        }
      },
      legend: {
        show: !1
      }
    });
  }), $("#example-11").click(function () {
    t.unbind(), $.plot(t, o, {
      series: {
        pie: {
          innerRadius: .5,
          show: !0
        }
      }
    });
  }), $("#example-12").click(function () {
    t.unbind(), $.plot(t, o, {
      series: {
        pie: {
          show: !0
        }
      },
      grid: {
        hoverable: !0,
        clickable: !0
      }
    }), t.bind("plothover", function (o, i, a) {
      var t;
      a && (t = parseFloat(a.series.percent).toFixed(2), $("#hover").html("<span style='font-weight:bold; color:" + a.series.color + "'>" + a.series.label + " (" + t + "%)</span>"));
    }), t.bind("plotclick", function (o, i, a) {
      a && (percent = parseFloat(a.series.percent).toFixed(2), alert(a.series.label + ": " + percent + "%"));
    });
  }), $("#example-1").click();
}
initBasicLine(), initCrosshairTracking(), initBasicArea(), initStackedBar(), initAxisTickLabels(), initPieCharts();