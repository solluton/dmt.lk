"use strict";

function initializeFooTables() {
  FooTable.MyFiltering = FooTable.Filtering.extend({
    construct: function construct(t) {
      this._super(t), this.statuses = ["Active", "Disabled", "Suspended"], this.def = "Alls", this.$status = null;
    },
    $create: function $create() {
      this._super();
      var e = this,
        t = $("<div/>", {
          "class": "form-group"
        }).prependTo(e.$form);
      e.$status = $("<select/>", {
        "class": "form-select"
      }).on("change", {
        self: e
      }, e._onStatusDropdownChanged).append($("<option/>", {
        text: e.def
      })).appendTo(t), $.each(e.statuses, function (t, o) {
        e.$status.append($("<option/>").text(o));
      });
    },
    _onStatusDropdownChanged: function _onStatusDropdownChanged(t) {
      var t = t.data.self,
        o = $(this).val();
      o !== t.def ? t.addFilter("status", o, ["status"]) : t.removeFilter("status"), t.filter();
    },
    draw: function draw() {
      this._super();
      var t = this.find("status");
      t instanceof FooTable.Filter ? this.$status.val(t.query.val()) : this.$status.val(this.def);
    }
  }), FooTable.components.register("filtering", FooTable.MyFiltering), $("#fooTableFiltering").footable({
    columns: $.get("./../assets/js/components/data/footable_columns.min.json"),
    rows: $.get("./../assets/js/components/data/footable_rows.min.json")
  });
  var e = $("#fooTableEditorModal"),
    a = $("#fooTableEdito"),
    s = $("#fooTableEditoTitle"),
    n = FooTable.init("#fooTableEditing", {
      editing: {
        enabled: !0,
        addRow: function addRow() {
          e.removeData("row"), a[0].reset(), s.text("Add a new row"), e.modal("show");
        },
        editRow: function editRow(t) {
          var o = t.val();
          a.find("#id").val(o.id), a.find("#firstName").val(o.firstName), a.find("#lastName").val(o.lastName), a.find("#jobTitle").val(o.jobTitle), a.find("#startedOn").val(o.startedOn.format("YYYY-MM-DD")), a.find("#dob").val(o.dob.format("YYYY-MM-DD")), e.data("row", t), s.text("Edit Row #" + o.id), e.modal("show");
        },
        deleteRow: function deleteRow(t) {
          confirm("Are you sure you want to delete the row?") && t["delete"]();
        }
      }
    }),
    i = 10;
  a.on("submit", function (t) {
    var o;
    this.checkValidity && !this.checkValidity() || (t.preventDefault(), t = e.data("row"), o = {
      id: a.find("#id").val(),
      firstName: a.find("#firstName").val(),
      lastName: a.find("#lastName").val(),
      jobTitle: a.find("#jobTitle").val(),
      startedOn: moment(a.find("#startedOn").val(), "YYYY-MM-DD"),
      dob: moment(a.find("#dob").val(), "YYYY-MM-DD")
    }, t instanceof FooTable.Row ? t.val(o) : (o.id = i++, n.rows.add(o)), e.modal("hide"));
  }), $("#fooTableToggle").footable(), $("[data-page-size]").on("click", function (t) {
    t.preventDefault();
    t = $(this).data("pageSize");
    FooTable.get("#fooTablePageSize").pageSize(t);
  }), $("#fooTablePageSize").footable({
    columns: $.get("./../assets/js/components/data/footable_columns.min.json"),
    rows: $.get("./../assets/js/components/data/footable_rows.min.json")
  }), $("#fooTableCollapse").footable({
    columns: $.get("./../assets/js/components/data/footable_columns.min.json"),
    rows: $.get("./../assets/js/components/data/footable_rows.min.json")
  }), $("#fooTableModal").footable({
    useParentWidth: !0,
    columns: $.get("./../assets/js/components/data/footable_columns.min.json"),
    rows: $.get("./../assets/js/components/data/footable_rows.min.json")
  });
}
initializeFooTables();