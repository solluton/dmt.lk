"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function initDropzoneBasic() {
  var _Dropzone;
  new Dropzone("#dropzoneBasic", (_Dropzone = {
    url: "./../../assets/images/upload",
    paramName: "file"
  }, _defineProperty(_Dropzone, "paramName", "file"), _defineProperty(_Dropzone, "maxFiles", 1), _defineProperty(_Dropzone, "maxFilesize", 5), _defineProperty(_Dropzone, "addRemoveLinks", !0), _Dropzone));
}
function initDropzoneMultiple() {
  var _Dropzone2;
  new Dropzone("#dropzoneMultiple", (_Dropzone2 = {
    url: "./../../assets/images/upload",
    paramName: "file"
  }, _defineProperty(_Dropzone2, "paramName", "file"), _defineProperty(_Dropzone2, "maxFiles", 10), _defineProperty(_Dropzone2, "maxFilesize", 10), _defineProperty(_Dropzone2, "addRemoveLinks", !0), _Dropzone2));
}
initDropzoneBasic(), initDropzoneMultiple();